using System.Text.Json;
using JwtIdentity.Common.Helpers;
using JwtIdentity.Common.ViewModels;
using NUnit.Framework;

namespace JwtIdentity.Tests.ViewModelTests;

[TestFixture]
public class AiPromptIntegrationTests
{
    private JsonSerializerOptions _options;

    [SetUp]
    public void Setup()
    {
        _options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
        };
        _options.Converters.Add(new QuestionViewModelConverter());
    }

    [Test]
    public void AiGeneratedSurvey_WithCorrectedQuestionTypes_ShouldDeserializeCorrectly()
    {
        // Arrange - Simulate JSON that would be generated by AI with corrected prompt
        var json = """
        {
            "title": "Customer Satisfaction Survey",
            "description": "Help us improve our service",
            "questions": [
                {
                    "text": "Please describe your overall experience:",
                    "questionNumber": 1,
                    "isRequired": true,
                    "questionType": 1
                },
                {
                    "text": "The service met my expectations:",
                    "questionNumber": 2,
                    "isRequired": true,
                    "questionType": 2
                },
                {
                    "text": "How satisfied are you with our service?",
                    "questionNumber": 3,
                    "isRequired": true,
                    "questionType": 3,
                    "options": [
                        {"optionText": "Very satisfied", "order": 1},
                        {"optionText": "Satisfied", "order": 2},
                        {"optionText": "Neutral", "order": 3},
                        {"optionText": "Dissatisfied", "order": 4}
                    ]
                },
                {
                    "text": "Rate our service from 1 to 10:",
                    "questionNumber": 4,
                    "isRequired": true,
                    "questionType": 4
                },
                {
                    "text": "Which features did you find most useful? (Select all that apply)",
                    "questionNumber": 5,
                    "isRequired": false,
                    "questionType": 5,
                    "options": [
                        {"optionText": "Easy navigation", "order": 1},
                        {"optionText": "Fast response time", "order": 2},
                        {"optionText": "Clear documentation", "order": 3},
                        {"optionText": "Helpful support", "order": 4}
                    ]
                }
            ]
        }
        """;

        // Act
        var survey = JsonSerializer.Deserialize<SurveyViewModel>(json, _options);

        // Assert
        Assert.That(survey, Is.Not.Null);
        Assert.That(survey.Title, Is.EqualTo("Customer Satisfaction Survey"));
        Assert.That(survey.Questions, Is.Not.Null);
        Assert.That(survey.Questions.Count, Is.EqualTo(5));

        // Verify each question type was deserialized correctly
        Assert.That(survey.Questions[0], Is.InstanceOf<TextQuestionViewModel>());
        Assert.That(survey.Questions[0].QuestionType, Is.EqualTo(QuestionType.Text));

        Assert.That(survey.Questions[1], Is.InstanceOf<TrueFalseQuestionViewModel>());
        Assert.That(survey.Questions[1].QuestionType, Is.EqualTo(QuestionType.TrueFalse));

        Assert.That(survey.Questions[2], Is.InstanceOf<MultipleChoiceQuestionViewModel>());
        Assert.That(survey.Questions[2].QuestionType, Is.EqualTo(QuestionType.MultipleChoice));
        var multipleChoice = survey.Questions[2] as MultipleChoiceQuestionViewModel;
        Assert.That(multipleChoice?.Options.Count, Is.EqualTo(4));

        Assert.That(survey.Questions[3], Is.InstanceOf<Rating1To10QuestionViewModel>());
        Assert.That(survey.Questions[3].QuestionType, Is.EqualTo(QuestionType.Rating1To10));

        Assert.That(survey.Questions[4], Is.InstanceOf<SelectAllThatApplyQuestionViewModel>());
        Assert.That(survey.Questions[4].QuestionType, Is.EqualTo(QuestionType.SelectAllThatApply));
        var selectAll = survey.Questions[4] as SelectAllThatApplyQuestionViewModel;
        Assert.That(selectAll?.Options.Count, Is.EqualTo(4));
    }

    [Test]
    public void OldAiPrompt_WithWrongQuestionType6_ShouldFailCorrectly()
    {
        // Arrange - Simulate JSON that would be generated by the OLD incorrect AI prompt 
        var json = """
        {
            "title": "Survey with Wrong Question Type",
            "description": "This uses the old incorrect type mapping",
            "questions": [
                {
                    "text": "Select all that apply (using wrong type 6):",
                    "questionNumber": 1,
                    "isRequired": true,
                    "questionType": 6,
                    "options": [
                        {"optionText": "Option 1", "order": 1},
                        {"optionText": "Option 2", "order": 2}
                    ]
                }
            ]
        }
        """;

        // Act & Assert
        var ex = Assert.Throws<NotSupportedException>(() => 
            JsonSerializer.Deserialize<SurveyViewModel>(json, _options));
        
        Assert.That(ex?.Message, Does.Contain("Unsupported QuestionType: 6"));
    }
}