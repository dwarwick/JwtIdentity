@inherits LayoutComponentBase
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Client
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage

<MudThemeProvider IsDarkMode="@_isDarkMode" />

<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CascadingValue Value="_theme" Name="Theme">
    <div class="app-container">
        <!-- Fixed height header -->
        <MyNavMenu @bind-DarkTheme="@_isDarkMode" @bind-DarkTheme:after="HandleThemeChanged" />
        
        <!-- Flexible main content with scrolling -->
        <div class="main-content">
            <MudContainer>
                @Body
            </MudContainer>
        </div>
        
        <!-- Fixed height footer -->
        <div class="app-footer">
            <MudText Class="mx-auto footer-text" Typo="Typo.inherit">
                <MudStack Row="true" Spacing="2">
                    © @DateTime.Now.Year davidtest.xyz - All Rights Reserved 
                    <span>|</span> 
                    <MudLink Href="/feedback" Underline="Underline.None" Typo="Typo.inherit"  >Leave Feedback</MudLink>
                </MudStack>
            </MudText>
        </div>
    </div>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    MudTheme mudTheme = new();
    bool _isDarkMode;
    string _theme = "light";

    MudTheme MyCustomLightTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            AppbarBackground = Colors.Gray.Lighten3,
        }, 
    };

    IJSObjectReference? module;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // reference app.js in the wwwroot folder
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");

            AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                // get the Id of the user from the claims
                var userId = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                ApplicationUserViewModel? applicationUserViewModel = await Client.GetFromJsonAsync<ApplicationUserViewModel>($"api/applicationuser/{userId}");

                if (applicationUserViewModel != null)
                {
                    applicationUserViewModel.Token = await LocalStorage.GetItemAsStringAsync("authToken") ?? string.Empty;

                    ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser = applicationUserViewModel;
                }
            }

            _theme = await LocalStorage.GetItemAsStringAsync("theme") ?? string.Empty;

            if (string.IsNullOrEmpty(_theme))
            {
                if (((CustomAuthStateProvider)AuthStateProvider!).CurrentUser != null)
                {
                    _theme = ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Theme ?? "light"; //  "dark" : "light";
                }
                else
                {
                    _theme = "light";
                }
            }
            await SetTheme();
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task SetTheme()
    {
        await LocalStorage.SetItemAsStringAsync("theme", _theme);
        await LocalStorage.SetItemAsync<DateTime>("LastCheckTime", DateTime.UtcNow);

        if (_theme == "light") mudTheme = MyCustomLightTheme;

        _isDarkMode = _theme == "dark";

        if (module != null)
        {            
            await module.InvokeAsync<string>("removeThemes");

            await module.InvokeAsync<string>("addCss", $"css/app-{_theme}.css");

            if (_theme == "light")
            {
                await module.InvokeAsync<string>("addCss", $"css/bootstrap5.3.css");
            }
            else
            {
                await module.InvokeAsync<string>("addCss", $"css/bootstrap5.3-dark.css");
            }
        }

        if (((CustomAuthStateProvider)AuthStateProvider!).CurrentUser != null && ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Theme != _theme)
        {
            ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser!.Theme = _theme;

            await Client.PutAsJsonAsync($"api/applicationuser/{((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Id}", ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser);
        }
    }

    private async Task HandleThemeChanged()
    {
        _theme = _isDarkMode ? "dark" : "light";
        await SetTheme();
    }
}
