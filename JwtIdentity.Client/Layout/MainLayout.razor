@inherits LayoutComponentBase
@using System.Security.Claims
@inject AuthenticationStateProvider AuthStateProvider
@inject HttpClient Client
@inject IJSRuntime JSRuntime
@inject ILocalStorageService LocalStorage
@inject IUtility Utility

<MudThemeProvider IsDarkMode="@_isDarkMode" />

<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />

<CascadingValue Value="_theme" Name="Theme">
    <div class="app-container">
        <!-- Fixed height header -->
        <MyNavMenu @bind-DarkTheme="@_isDarkMode" @bind-DarkTheme:after="HandleThemeChanged" />        
        
        <!-- Flexible main content with scrolling -->
        <div class="main-content">
            <MudContainer>
                @Body
            </MudContainer>
        </div>
        
        <!-- Fixed height footer -->
        <div class="app-footer">
            <MudText Class="mx-auto footer-text" Typo="Typo.inherit">
                <MudStack Row="true" Wrap="Wrap.Wrap" Spacing="2" AlignItems="AlignItems.Center" Class="justify-center">
                    <MudImage Src="images/sectigo_trust_seal_sm_82x32.png" />
                    <span>© @DateTime.Now.Year @Utility.Domain - All Rights Reserved</span>
                    <span>|</span>
                    
                    @if (((CustomAuthStateProvider)AuthStateProvider).CurrentUser != null && (((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Permissions.Contains(Permissions.LeaveFeedback) ?? false))
                    {
                        <MudLink Href="/feedback" Underline="Underline.None" Typo="Typo.inherit">Leave Feedback</MudLink>
                        <span>|</span>
                    }
                    
                    <MudLink Href="/privacy-policy" Underline="Underline.None" Typo="Typo.inherit">Privacy Policy</MudLink>
                    <span>|</span>
                    <MudLink Href="/cookie-policy" Underline="Underline.None" Typo="Typo.inherit">Cookie Policy</MudLink>
                    <span>|</span>
                    <MudLink Href="javascript:void(0)" OnClick="OpenCookieSettings" Underline="Underline.None" Typo="Typo.inherit">Cookie Settings</MudLink>
                    <span>|</span>
                    <MudLink Href="/terms-of-service" Underline="Underline.None" Typo="Typo.inherit">Terms of Service</MudLink>
                </MudStack>
            </MudText>
        </div>
        
        <!-- Cookie Consent Banner -->
        @if (!_cookiesAccepted)
        {
            <div class="cookie-banner @(_showCookieBanner ? "visible" : "")">
                <div class="cookie-content">
                    <MudText Typo="Typo.body1">
                        This site uses cookies to securely authenticate your login session and enhance your browsing experience. 
                        You can choose which types of cookies you allow us to use. Read our full <MudLink Href="/cookie-policy" Underline="Underline.Always">Cookie Policy</MudLink> for more information.
                    </MudText>
                    <div class="cookie-actions">
                        <MudButton Variant="Variant.Filled" 
                                  Color="Color.Primary" 
                                  OnClick="AcceptAllCookies"
                                  Class="mt-2 mx-1">
                            Accept All Cookies
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" 
                                  Color="Color.Error" 
                                  OnClick="RejectThirdPartyCookies"
                                  Class="mt-2 mx-1">
                            Essential Cookies Only
                        </MudButton>                        
                    </div>
                </div>
            </div>
        }
    </div>
</CascadingValue>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    #nullable enable
    
    MudTheme mudTheme = new();
    bool _isDarkMode;
    string _theme = "light";
    bool _cookiesAccepted = false;
    bool _showCookieBanner = false;

    MudTheme MyCustomLightTheme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            AppbarBackground = Colors.Gray.Lighten3,
        }, 
    };

    IJSObjectReference? module;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // reference app.js in the wwwroot folder
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/app.js");

            AuthenticationState authState = await AuthStateProvider.GetAuthenticationStateAsync();

            if (authState.User?.Identity?.IsAuthenticated ?? false)
            {
                // get the Id of the user from the claims
                var userId = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

                ApplicationUserViewModel? applicationUserViewModel = await Client.GetFromJsonAsync<ApplicationUserViewModel>($"api/applicationuser/{userId}");

                if (applicationUserViewModel != null)
                {
                    applicationUserViewModel.Token = await LocalStorage.GetItemAsStringAsync("authToken") ?? string.Empty;

                    ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser = applicationUserViewModel;
                }
            }

            _theme = await LocalStorage.GetItemAsStringAsync("theme") ?? string.Empty;

            if (string.IsNullOrEmpty(_theme))
            {
                if (((CustomAuthStateProvider)AuthStateProvider!).CurrentUser != null)
                {
                    _theme = ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Theme ?? "light"; //  "dark" : "light";
                }
                else
                {
                    _theme = "light";
                }
            }
            await SetTheme();
            
            // Check if cookies have been accepted
            var cookiesAccepted = await LocalStorage.GetItemAsync<bool>("cookiesAccepted");
            _cookiesAccepted = cookiesAccepted;
            if (!_cookiesAccepted)
            {
                // Add a small delay to show the banner after the page loads
                await Task.Delay(500);
                _showCookieBanner = true;
                StateHasChanged();
            }

            bool consentGiven = await JSRuntime.InvokeAsync<bool>("userHasThirdPartyConsent");
            if (consentGiven)
            {
                await JSRuntime.InvokeVoidAsync("loadGoogleAds");
            }
        }
        catch (Exception ex)
        {
            // Handle exception
        }
    }

    private async Task SetTheme()
    {
        await LocalStorage.SetItemAsStringAsync("theme", _theme);
        await LocalStorage.SetItemAsync<DateTime>("LastCheckTime", DateTime.UtcNow);

        if (_theme == "light") mudTheme = MyCustomLightTheme;

        _isDarkMode = _theme == "dark";

        if (module != null)
        {            
            await module.InvokeAsync<string>("removeThemes");

            await module.InvokeAsync<string>("addCss", $"css/app-{_theme}.css");

            if (_theme == "light")
            {
                await module.InvokeAsync<string>("addCss", $"css/bootstrap5.3.css");
            }
            else
            {
                await module.InvokeAsync<string>("addCss", $"css/bootstrap5.3-dark.css");
            }
        }

        if (((CustomAuthStateProvider)AuthStateProvider!).CurrentUser != null && ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Theme != _theme)
        {
            ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser!.Theme = _theme;

            await Client.PutAsJsonAsync($"api/applicationuser/{((CustomAuthStateProvider)AuthStateProvider!).CurrentUser?.Id}", ((CustomAuthStateProvider)AuthStateProvider!).CurrentUser);
        }
    }

    private async Task HandleThemeChanged()
    {
        _theme = _isDarkMode ? "dark" : "light";
        await SetTheme();
    }
    
    private async Task AcceptAllCookies()
    {
        // Save cookie acceptance to local storage
        await LocalStorage.SetItemAsync("cookiesAccepted", true);
        _cookiesAccepted = true;
        _showCookieBanner = false;
        
        // Call our JavaScript function to set the cookie with the API
        await JSRuntime.InvokeVoidAsync("acceptAllCookies");
        
        // Load Google Ads once consent is given
        await JSRuntime.InvokeVoidAsync("loadGoogleAds");
        
        StateHasChanged();
    }
    
    private async Task RejectThirdPartyCookies()
    {
        // First perform a complete cleanup of all third-party services
        await JSRuntime.InvokeVoidAsync("clearThirdPartyServicesCompletely");
        
        // Save cookie acceptance to local storage
        await LocalStorage.SetItemAsync("cookiesAccepted", true);
        _cookiesAccepted = true;
        _showCookieBanner = false;
        
        // Call our JavaScript function to set cookie rejection
        await JSRuntime.InvokeVoidAsync("rejectThirdPartyCookies");
        
        // Force page reload to ensure a clean state
        await JSRuntime.InvokeVoidAsync("eval", "location.reload()");
        
        // Note: The state change below will likely not execute due to the page reload
        StateHasChanged();
    }
    
    private async Task OpenCookieSettings()
    {
        // Clear existing cookie consent from localStorage
        await LocalStorage.RemoveItemAsync("cookiesAccepted");
        _cookiesAccepted = false;
        
        // Call JavaScript to clear the third-party cookies and consent cookie
        await JSRuntime.InvokeVoidAsync("clearCookieConsent");
        
        // Show the cookie banner again
        _showCookieBanner = true;
        StateHasChanged();
    }
}
