@page "/survey/responses/{SurveyId}"
@using ExportType = Syncfusion.Blazor.Charts.ExportType
@inherits BarChartModel

<PageTitle>Survey Shark - Charts</PageTitle>

@if (SurveyData != null && (BarChartData != null || SelectedQuestion == null))
{

    <div class="d-flex flex-column">
        <div class="row">
            <div class="col-11"> @* Select Question Dropdown *@
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0,1 })">
                    <MudSelect T="QuestionViewModel" Label="Select Question" Value="SelectedQuestion" Variant="Variant.Filled" Class="w-100 mb-1" ValueChanged="@((e) => HandleSelectQuestion(e))" ToStringFunc="@QuestionDropdownConverter">
                        <MudSelectItem Value="@((QuestionViewModel?)null)">All Questions</MudSelectItem>
                        @foreach (var question in SurveyData.OrderBy(x => x.Question.QuestionNumber).Select(x => x.Question))
                        {
                            <MudSelectItem T="QuestionViewModel" Value="@question">@($"{question.QuestionNumber}. {question.Text}")</MudSelectItem>
                        }
                    </MudSelect>
                </DemoBorder>
                @{
                    string demoQuestionText = 
                    DemoStep == 0 ? @"This page displays your survey results for each question in chart form. 
                    Select the question to view results for, or select All Questions from the dropdown. 
                    We are currentlty viewing the results for question 1." : 
                    DemoStep == 1 ? @"Go ahead and select All Questions from the dropdown. 
                    All Questions is above question 1." :
                    DemoStep == 2 ? @"Scroll down to view the results of each question. Click next when you are ready to continue." : "";
                }
                <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0,1,2 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                    <MudText Typo="Typo.body2" Style="white-space: pre-line">@demoQuestionText</MudText>
                    @if (DemoStep == 0 || DemoStep == 2)
                    {
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0,2 })" IsButton="true">
                            <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                        </DemoBorder>
                    }                    
                </DemoPopup>
            </div>
            <div class="col-1">
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 4 })" IsButton="true">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="my-1 w-100" OnClick="PrintChart"> Print</MudButton>
                </DemoBorder>

                <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 4 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                    <MudText Typo="Typo.body2" Style="white-space: pre-line">If you click Print, the chart(s) that is/are displayed can be printed. Feel free to try it if you want.</MudText>                    
                    <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0, 2 })" IsButton="true">
                        <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                    </DemoBorder>                    
                </DemoPopup>
            </div>
        </div>

        <div class="row">
            <div class="col-6"> @* Select Chart Type Dropdown *@
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 3 })">
                    <MudSelect id="ChartType_dropdown" T="string" Label="Select Chart Type" @bind-Value="SelectedChartType" Variant="Variant.Filled" Class="mb-1">
                        <MudSelectItem T="string" Value="@("Bar")">Bar</MudSelectItem>
                        <MudSelectItem T="string" Value="@("Pie")">Pie</MudSelectItem>
                    </MudSelect>
                </DemoBorder>
                <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 3 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                    <MudText Typo="Typo.body2" Style="white-space: pre-line">You can change to a Pie Chart using this dropdown. Go ahead and select Pie Chart from the Chart Type dropdown.</MudText>                    
                </DemoPopup>
            </div>

            <div class="col-5"> @* Select Export Type Dropdown *@
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 5 })">
                    <MudSelect T="ExportType" Label="Select Export Type" @bind-Value="SelectedExportType" Variant="Variant.Filled" Class="mb-1">
                        @foreach (var exportType in Enum.GetValues(typeof(ExportType)).Cast<ExportType>())
                        {
                            <MudSelectItem T="ExportType" Value="@exportType">@exportType.ToString()</MudSelectItem>
                        }
                    </MudSelect>
                </DemoBorder>
                <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 5 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                    <MudText Typo="Typo.body2" Style="white-space: pre-line">You can export the chart(s) in a variety of formats using this dropdown. 
                        Feel free to try it out if you want. When you are done, you can close this popup.
                    </MudText>
                    <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 5 })" IsButton="true">
                        <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                    </DemoBorder>
                </DemoPopup>
            </div>
            <div class="col-1">
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 5 })" IsButton="true">
                <MudButton id="ExportChart_button" Variant="Variant.Filled" Color="Color.Primary" Class="my-1 w-100" OnClick="ExportChart">Export</MudButton>
                </DemoBorder>
            </div>
        </div>
    </div>


    @if (!IsLoading && SelectedQuestion != null)
    {
        <div id="PrintArea" @ref="SingleChartElement">
            @switch (SelectedChartType)
            {
                case "Bar":
                    <SfChart @ref="chartObj" Title="@($"{SelectedQuestion.QuestionNumber}. {SelectedQuestion.Text}")" SubTitle="@(GetSubtitle())" Theme="@CurrentTheme" Width="@ChartWidth" Height="@ChartHeight">
                        <ChartTooltipSettings Enable="true" />
                        <ChartTitleStyle TextOverflow="TextOverflow.Wrap" TextAlignment="Alignment.Center"></ChartTitleStyle>
                        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
                        <ChartPrimaryYAxis Interval="1" />
                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@BarChartData" XName="X" YName="Y" Type="ChartSeriesType.Column" Fill="rgba(61, 44, 191, 1)" />
                        </ChartSeriesCollection>
                        <ChartAnnotations>
                            <ChartAnnotation X="105" Y="35" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                                <ContentTemplate>
                                    <img src="/images/logo_200_60.png" alt="Website Logo" width="200" height="60" />
                                </ContentTemplate>
                            </ChartAnnotation>
                        </ChartAnnotations>
                        <ChartMargin Left="5" Right="5" Top="65" Bottom="0"></ChartMargin>
                    </SfChart>
                    break;

                case "Pie":
                    <SfAccumulationChart @ref="pieChartObj" Title="@($"{SelectedQuestion.QuestionNumber}. {SelectedQuestion.Text}")" SubTitle="@(GetSubtitle())" Theme="@CurrentTheme" Width="@ChartWidth" Height="@ChartHeight">
                        <AccumulationChartTooltipSettings Enable="true" />
                        <AccumulationChartTitleStyle TextOverflow="TextOverflow.Wrap" TextAlignment="Alignment.Center"></AccumulationChartTitleStyle>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@PieChartData" XName="X" YName="Y" Radius="70%">
                                <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Outside" Format="{value}%" />
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                        <AccumulationChartAnnotations>
                            <AccumulationChartAnnotation X="105" Y="35" CoordinateUnits="Units.Pixel" Region="Regions.Chart">
                                <ContentTemplate>
                                    <img src="/images/logo_200_60.png" alt="Website Logo" width="200" height="60" />
                                </ContentTemplate>
                            </AccumulationChartAnnotation>
                        </AccumulationChartAnnotations>
                        <AccumulationChartMargin Left="5" Right="5" Top="65" Bottom="0"></AccumulationChartMargin>
                    </SfAccumulationChart>                    

                    break;
            }
        </div>
    }
    else if (!IsLoading && SurveyData.Count > 0 && BarChartDataForPrint.Count == SurveyData.Count && PieChartDataForPrint.Count == SurveyData.Count)
    {
        int questionIndex = 0;
        <div id="PrintArea" @ref="AllChartsElement" class="print-section">
            <MudStack Spacing="1">

                @foreach (var question in SurveyData.OrderBy(x => x.Question.QuestionNumber).Select(x => x.Question.Text))
                {
                    var localIndex = questionIndex; // Create a local copy for closure
                    @switch (SelectedChartType)
                    {
                        case "Bar":
                            <div class="print-chart">
                                <SfChart @ref="BarCharts[localIndex]" Title="@($"{localIndex + 1}. {question}")" SubTitle="@(GetSubtitle())" Theme="@CurrentTheme" Width="@ChartWidth" Height="@ChartHeight">
                                    <ChartTooltipSettings Enable="true" />
                                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" />
                                    <ChartPrimaryYAxis Interval="1" />
                                    <ChartSeriesCollection>
                                        <ChartSeries DataSource="@(BarChartDataForPrint[localIndex])" XName="X" YName="Y" Type="ChartSeriesType.Column" Fill="rgba(61, 44, 191, 1)" />
                                    </ChartSeriesCollection>
                                </SfChart>
                            </div>
                            break;

                        case "Pie":
                            <div class="print-chart">
                                <SfAccumulationChart @ref="PieCharts[localIndex]" Title="@($"{localIndex + 1}. {question}")" SubTitle="@(GetSubtitle())" Theme="@CurrentTheme" Width="@ChartWidth" Height="@ChartHeight">
                                    <AccumulationChartTooltipSettings Enable="true" />
                                    <AccumulationChartSeriesCollection>
                                        <AccumulationChartSeries DataSource="@(PieChartDataForPrint[localIndex])" XName="X" YName="Y" Radius="70%">
                                            <AccumulationDataLabelSettings Visible="true" Position="AccumulationLabelPosition.Outside" Format="{value}%" />
                                        </AccumulationChartSeries>
                                    </AccumulationChartSeriesCollection>
                                </SfAccumulationChart>
                            </div>
                            break;
                    }
                    questionIndex++;
                }
            </MudStack>
        </div>

        @if (IsDemoUser && DemoStep == 3 && SelectedChartType == "Pie") NextDemoStep();
    }
}


