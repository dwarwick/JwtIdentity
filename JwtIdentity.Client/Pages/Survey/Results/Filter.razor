@page "/survey/filter/{SurveyId}"
@inherits FilterModel

<h3>Filter</h3>

@if (columnsInitialized)
{
    <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0 })">
        <SfGrid ID="Grid"
                @ref="Grid"
                TValue="ExpandoObject"
                DataSource="@SurveyRows"
                Height="315"
                AllowPaging="true"
                AllowSorting="true"
                AllowFiltering="true"
                AllowResizing="true"
                AllowTextWrap="true"
                GridLines="@GridSettings.GridLines"
                AllowExcelExport="true"
                ShowColumnChooser="true">

            <GridTextWrapSettings WrapMode="WrapMode.Content" />

            <GridTemplates>
                <ToolbarTemplate>
                    <div class="d-flex">
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 2 })" IsButton="true" Class="mx-2 my-1">
                            <MudButton id="ColumnChooser_button" StartIcon="@Icons.Material.Rounded.ViewColumn" Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenColumnChooser">Column Chooser</MudButton>
                        </DemoBorder>
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 3 })" IsButton="true">
                            <MudButton id="ExportExcel_button" StartIcon="@Icons.Custom.FileFormats.FileExcel" Variant="Variant.Filled" Color="Color.Success" OnClick="ExportToExcel">Export to Excel</MudButton>
                        </DemoBorder>
                    </div>
                    @{
                        string toolbarStepText = DemoStep == 2
                        ? @"Use the Column Chooser to select which columns are visible. 
Try it and then click Next to continue."
                        : DemoStep == 3
                        ? @"Export to Excel lets you download the responses for advanced analysis. 
Try it if you want and then click Next to continue."
                        : string.Empty;
                    }
                    <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 2, 3 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
                        <MudText Typo="Typo.body2" Style="white-space: pre-line">@toolbarStepText</MudText>
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 2, 3 })" IsButton="true">
                            <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                        </DemoBorder>
                    </DemoPopup>
                </ToolbarTemplate>
            </GridTemplates>

            <GridEvents TValue="ExpandoObject"
                        OnActionComplete="OnActionCompleteHandler"
                        DataBound="OnGridDataBound" />
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel"></GridFilterSettings>

            <GridColumns>

                @foreach (var q in Survey.Questions)
                {
                    <GridColumn Field="@_propertyMap[q.Id]"
                                HeaderText="@q.Text"
                                Type="@(q.QuestionType == QuestionType.Rating1To10
                                                                                                    ? ColumnType.Integer
                                                                                                    : q.QuestionType == QuestionType.TrueFalse
                                                                                                    ? ColumnType.Boolean
                                                                                                    : ColumnType.String)"
                        TextAlign="TextAlign.Left">

                        <HeaderTemplate>
                            <div title="@q.Text">
                                @q.Text
                            </div>
                        </HeaderTemplate>

                    </GridColumn>


                        }

            </GridColumns>

            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>

                        @if (Survey?.Questions?.Count > 0)
                        {
                            foreach (var q in Survey.Questions)
                            {
                                <GridAggregateColumn Field=@(_propertyMap[q.Id].ToString()) Type="Syncfusion.Blazor.Grids.AggregateType.Count">
                                    <FooterTemplate>
                                        @{
                                            double rowCount = TotalRowCount;


                                            <p>Row Count: @TotalRowCount</p>

                                            @* inside your FooterTemplate *@
                                            @if (q is MultipleChoiceQuestionViewModel mcq)
                                            {
                                                foreach (var opt in mcq.Options.OrderBy(o => o.Order))
                                                {
                                                    var count = OptionCounts.TryGetValue(q.Id, out var d1)
                                                    && d1.TryGetValue(opt.Id, out var c1)
                                                    ? c1 : 0;

                                                    string percentage = rowCount == 0 ? "0.00%" : (count / rowCount).ToString("P2");

                                                    <p>@opt.OptionText: @count (@percentage)</p>
                                                }
                                            }
                                            else if (q is SelectAllThatApplyQuestionViewModel saq)
                                            {
                                                if (OptionCounts.TryGetValue(q.Id, out var dict))
                                                {
                                                    foreach (var opt in saq.Options.OrderBy(o => o.Order))
                                                    {
                                                        var count = dict.TryGetValue(opt.Id, out var c) ? c : 0;
                                                        string percentage = rowCount == 0 ? "0.00%" : (count / rowCount).ToString("P2");
                                                        <p>@opt.OptionText: @count (@percentage)</p>
                                                    }
                                                }
                                            }
                                            else if (q is TrueFalseQuestionViewModel)
                                            {
                                                if (OptionCounts.TryGetValue(q.Id, out var tfDict))
                                                {
                                                    var tcount = tfDict.TryGetValue(1, out var tc) ? tc : 0;
                                                    var fcount = tfDict.TryGetValue(0, out var fc) ? fc : 0;
                                                    string tpercentage = rowCount == 0 ? "0.00%" : (tcount / rowCount).ToString("P2");
                                                    string fpercentage = rowCount == 0 ? "0.00%" : (fcount / rowCount).ToString("P2");
                                                    <p>True: @tcount (@tpercentage)</p>
                                                    <p>False: @fcount (@fpercentage)</p>
                                                }
                                            }
                                            else if (q is Rating1To10QuestionViewModel)
                                            {
                                                if (OptionCounts.TryGetValue(q.Id, out var rtDict))
                                                {
                                                    foreach (var rating in Enumerable.Range(1, 10))
                                                    {
                                                        var rcount = rtDict.TryGetValue(rating, out var rc) ? rc : 0;
                                                        string percentage = rowCount == 0 ? "0.00%" : (rcount / rowCount).ToString("P2");
                                                        <p>@rating: @rcount (@percentage)</p>
                                                    }
                                                }
                                            }


                                        }
                                    </FooterTemplate>
                                </GridAggregateColumn>
                            }
                        }

                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>
        </SfGrid>
    </DemoBorder>

    string gridStepText = DemoStep switch
    {
        0 => "Each row of the grid represents a response from one user.",
        1 => @"The grid supports sorting and filtering. 
Use the controls in the colum headers. 
Try it out and click Next when you're ready.",
        4 => @"The aggregate section at the bottom of the grid summarizes the result percentages for a quick analysis. 
These are updated based on filtering",
        5 => @"Now that you've explored the grid, let's continue the demo to see AI Survey Analysis.
Click Next to return to the Surveys I Created page.",
        _ => string.Empty
    };
    <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0, 1, 4, 5 })" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopLeft">
        <MudText Typo="Typo.body2" Style="white-space: pre-line">@gridStepText</MudText>
        @if (DemoStep == 0 || DemoStep == 1 || DemoStep == 4 || DemoStep == 5)
        {
            <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0, 1, 4 })" IsButton="true">
                <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
            </DemoBorder>
        }
    </DemoPopup>
}

