@page "/survey/branching/{SurveyId}"
@namespace JwtIdentity.Client.Pages.Survey
@inherits BranchingSurveyEditModel
@attribute [Authorize(Policy = Permissions.CreateSurvey)]
@using Syncfusion.Blazor.Diagram

<PageTitle>Survey Shark - Survey Branching</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween" Class="mb-4">
    <MudText Typo="Typo.h4">Survey Branching: @Survey?.Title</MudText>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo($"/survey/edit/{SurveyId}"))">
        Back to Edit Survey
    </MudButton>
</MudStack>

@if (Survey == null || Loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Overview" Icon="@Icons.Material.Filled.Visibility">
            <MudText Typo="Typo.h5" Class="mb-3">Survey Flow Diagram</MudText>
            <MudAlert Severity="Severity.Info" Class="mb-4">
                This diagram shows the flow of your survey based on the branching configuration. Blue boxes indicate conditional branching rules, while dashed arrows show sequential flow.
            </MudAlert>
            
            <MudPaper Elevation="1" Class="pa-4" Style="overflow: auto;">
                @if (Nodes.Any())
                {
                    <SfDiagramComponent @ref="@diagram" 
                                       Height="100%" 
                                       Width="100%"
                                       Nodes="@Nodes" 
                                       Connectors="@Connectors"
                                       NodeCreating="@OnNodeCreating" 
                                       ConnectorCreating="OnConnectorCreating">
                        <SnapSettings Constraints="SnapConstraints.None"></SnapSettings>
                        <Layout Type="LayoutType.ComplexHierarchicalTree" 
                               HorizontalSpacing="100" 
                               VerticalSpacing="80"
                               Orientation="LayoutOrientation.TopToBottom"
                               HorizontalAlignment="Syncfusion.Blazor.Diagram.HorizontalAlignment.Center"
                               VerticalAlignment="VerticalAlignment.Top">
                            <LayoutMargin Top="20" Left="20" Right="20" Bottom="20"></LayoutMargin>
                        </Layout>
                    </SfDiagramComponent>
                }
                else
                {
                    <MudAlert Severity="Severity.Info">
                        No question groups defined yet. Add groups to create a branching flow.
                    </MudAlert>
                }
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="Question Groups" Icon="@Icons.Material.Filled.Folder">
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-3">
                <MudText Typo="Typo.h5">Manage Question Groups</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddQuestionGroup" StartIcon="@Icons.Material.Filled.Add">
                    Add Group
                </MudButton>
            </MudStack>

            @foreach (var group in QuestionGroups.OrderBy(g => g.GroupNumber))
            {
                var colorClass = $"group-color-{group.GroupNumber % 10}";
                <MudPaper Elevation="2" Class="@($"pa-4 mb-3 {colorClass}")">
                    <MudStack Spacing="3">
                        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <span class="@($"group-badge group-badge-{group.GroupNumber % 10}")">Group @group.GroupNumber</span>
                                <MudText Typo="Typo.h6">
                                    @(string.IsNullOrWhiteSpace(group.GroupName) ? "Unnamed Group" : group.GroupName)
                                </MudText>
                            </MudStack>
                            @if (group.GroupNumber > 0)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="MudBlazor.Size.Small"
                                               OnClick="@(() => DeleteQuestionGroup(group))" />
                            }
                        </MudStack>

                        <MudTextField Label="Group Name" Value="@group.GroupName" 
                                     Variant="Variant.Outlined" 
                                     HelperText="Optional: Give this group a descriptive name"
                                     ValueChanged="@(async (string value)  => { group.GroupName = value; await UpdateQuestionGroup(group); await RefreshDiagram(); })" />

                        <MudDivider />

                        <MudText Typo="Typo.subtitle1" Class="font-weight-bold">Questions in this Group:</MudText>
                        
                        @{
                            var groupQuestions = Survey.Questions.Where(q => q.GroupId == group.GroupNumber).OrderBy(q => q.QuestionNumber).ToList();
                        }

                        @if (!groupQuestions.Any())
                        {
                            <MudAlert Severity="Severity.Info">No questions in this group yet. Assign questions from the Branching Rules tab.</MudAlert>
                        }
                        else
                        {
                            <MudList T="string" Dense="true">
                                @foreach (var question in groupQuestions)
                                {
                                    <MudListItem T="string">
                                        <MudText>Q@(question.QuestionNumber): @question.Text</MudText>
                                    </MudListItem>
                                }
                            </MudList>
                        }
                    </MudStack>
                </MudPaper>
            }
        </MudTabPanel>

        <MudTabPanel Text="Branching Rules" Icon="@Icons.Material.Filled.AccountTree">
            <MudText Typo="Typo.h5" Class="mb-3">Configure Branching Rules</MudText>
            
            <MudText Typo="Typo.subtitle1" Class="mb-3 font-weight-bold">Assign Questions to Groups:</MudText>
            <MudPaper Class="pa-4 mb-4">
                <MudList T="string" Dense="true">
                    @foreach (var question in Survey.Questions.OrderBy(q => q.QuestionNumber))
                    {
                        var questionColorClass = $"group-color-{question.GroupId % 10}";
                        <MudListItem T="string" Class="@questionColorClass">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <span class="@($"group-badge group-badge-{question.GroupId % 10}")">Group @question.GroupId</span>
                                <MudText Style="flex: 1;">Q@(question.QuestionNumber): @question.Text</MudText>
                                <MudSelect T="int" Label="Assign to Group" Value="question.GroupId" 
                                          ValueChanged="@(async value => { await MoveQuestionToGroup(question, value); await RefreshDiagram(); })"
                                          Variant="Variant.Outlined" Dense="true" Style="width: 250px;">
                                    @foreach (var g in QuestionGroups.OrderBy(x => x.GroupNumber))
                                    {
                                        <MudSelectItem Value="@g.GroupNumber">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                <span class="@($"group-badge group-badge-{g.GroupNumber % 10}")">Group @g.GroupNumber</span>
                                                <span>@(string.IsNullOrWhiteSpace(g.GroupName) ? "" : $"- {g.GroupName}")</span>
                                            </MudStack>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudStack>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>

            <MudText Typo="Typo.subtitle1" Class="mb-3 font-weight-bold">Configure Conditional Branching:</MudText>
            @foreach (var group in QuestionGroups.OrderBy(g => g.GroupNumber))
            {
                var groupQuestions = Survey.Questions.Where(q => q.GroupId == group.GroupNumber && 
                    (q.QuestionType == QuestionType.MultipleChoice || 
                     q.QuestionType == QuestionType.SelectAllThatApply ||
                     q.QuestionType == QuestionType.TrueFalse)).OrderBy(q => q.QuestionNumber).ToList();
                
                if (groupQuestions.Any())
                {
                    var colorClass = $"group-color-{group.GroupNumber % 10}";
                    <MudPaper Elevation="2" Class="@($"pa-4 mb-3 {colorClass}")">
                        <MudStack Spacing="2">
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                <span class="@($"group-badge group-badge-{group.GroupNumber % 10}")">Group @group.GroupNumber</span>
                                <MudText Typo="Typo.h6">@(string.IsNullOrWhiteSpace(group.GroupName) ? "Unnamed Group" : group.GroupName)</MudText>
                            </MudStack>

                            @foreach (var question in groupQuestions)
                            {
                                <MudDivider />
                                <MudText Typo="Typo.subtitle2" Class="font-weight-bold">
                                    Q@(question.QuestionNumber): @question.Text
                                </MudText>

                                @if (question.QuestionType == QuestionType.TrueFalse)
                                {
                                    <MudStack Spacing="2" Class="ml-4">
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudText>If True, go to:</MudText>
                                            <MudSelect T="int?" Label="Group" Value="@TrueBranch[question.Id]" 
                                                      ValueChanged="@(async (int? value) => { TrueBranch[question.Id] = value; await UpdateTrueFalseBranch((TrueFalseQuestionViewModel)question, value, true); await RefreshDiagram(); })"
                                                      Variant="Variant.Outlined" Dense="true" Style="width: 250px;">
                                                <MudSelectItem Value="@((int?)null)">Continue in sequence</MudSelectItem>
                                                @foreach (var g in QuestionGroups.Where(qg => qg.GroupNumber != group.GroupNumber).OrderBy(x => x.GroupNumber))
                                                {
                                                    <MudSelectItem Value="@((int?)g.GroupNumber)">
                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                            <span class="@($"group-badge group-badge-{g.GroupNumber % 10}")">Group @g.GroupNumber</span>
                                                            <span>@(string.IsNullOrWhiteSpace(g.GroupName) ? "" : $"- {g.GroupName}")</span>
                                                        </MudStack>
                                                    </MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudStack>
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                            <MudText>If False, go to:</MudText>
                                            <MudSelect T="int?" Label="Group" Value="@FalseBranch[question.Id]" 
                                                      ValueChanged="@(async (int? value) => { FalseBranch[question.Id] = value; await UpdateTrueFalseBranch((TrueFalseQuestionViewModel)question, value, false); await RefreshDiagram(); })"
                                                      Variant="Variant.Outlined" Dense="true" Style="width: 250px;">
                                                <MudSelectItem Value="@((int?)null)">Continue in sequence</MudSelectItem>
                                                @foreach (var g in QuestionGroups.Where(qg => qg.GroupNumber != group.GroupNumber).OrderBy(x => x.GroupNumber))
                                                {
                                                    <MudSelectItem Value="@((int?)g.GroupNumber)">
                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                            <span class="@($"group-badge group-badge-{g.GroupNumber % 10}")">Group @g.GroupNumber</span>
                                                            <span>@(string.IsNullOrWhiteSpace(g.GroupName) ? "" : $"- {g.GroupName}")</span>
                                                        </MudStack>
                                                    </MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudStack>
                                    </MudStack>
                                }
                                else
                                {
                                    var options = question.QuestionType == QuestionType.MultipleChoice 
                                        ? ((MultipleChoiceQuestionViewModel)question).Options 
                                        : ((SelectAllThatApplyQuestionViewModel)question).Options;

                                    @foreach (var option in options)
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2" Class="ml-4 my-1">
                                            <MudText Style="width: 200px;">@option.OptionText</MudText>
                                            <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Size="MudBlazor.Size.Small" />
                                            <MudSelect T="int?" Label="Branch to Group" Value="@option.BranchToGroupId" 
                                                      Variant="Variant.Outlined" Dense="true" Style="width: 250px;"
                                                      ValueChanged="@(async (int? value) => { option.BranchToGroupId = value; await UpdateChoiceOptionBranch(option); await RefreshDiagram(); })">
                                                <MudSelectItem Value="@((int?)null)">Continue in sequence</MudSelectItem>
                                                @foreach (var g in QuestionGroups.Where(qg => qg.GroupNumber != group.GroupNumber).OrderBy(x => x.GroupNumber))
                                                {
                                                    <MudSelectItem Value="@((int?)g.GroupNumber)">
                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                            <span class="@($"group-badge group-badge-{g.GroupNumber % 10}")">Group @g.GroupNumber</span>
                                                            <span>@(string.IsNullOrWhiteSpace(g.GroupName) ? "" : $"- {g.GroupName}")</span>
                                                        </MudStack>
                                                    </MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudStack>
                                    }
                                }
                            }
                        </MudStack>
                    </MudPaper>
                }
            }

            @if (!Survey.Questions.Any(q => q.QuestionType == QuestionType.MultipleChoice || 
                                           q.QuestionType == QuestionType.SelectAllThatApply ||
                                           q.QuestionType == QuestionType.TrueFalse))
            {
                <MudAlert Severity="Severity.Info">
                    No questions with branching capabilities found. Add Multiple Choice, Select All That Apply, or True/False questions to enable conditional branching.
                </MudAlert>
            }
        </MudTabPanel>
    </MudTabs>
}
