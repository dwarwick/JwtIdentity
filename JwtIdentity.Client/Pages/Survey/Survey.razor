@page "/survey/{SurveyId}"
@namespace JwtIdentity.Client.Pages.Survey
@inherits SurveyModel

<PageTitle>Survey Shark - Survey</PageTitle>

<div class="survey-container">
    @if (!isCaptchaVerified && !Preview)
    {       
        <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Verification Required</MudText>
        <!-- reCAPTCHA widget with data-callback pointing to our JS function -->
        <div id="captcha-container">
            <div class="g-recaptcha" data-sitekey=@Configuration["ReCaptcha:SiteKey"] data-callback="onCaptchaSuccess"></div>
        </div>
        <MudText Typo="Typo.body2" Class="mt-4" Align="Align.Center">Please complete the CAPTCHA to proceed.</MudText>
    }
    else
    {
        @if (Preview)
        {
            <MudAlert Class="survey-alert" Severity="Severity.Info" Variant="Variant.Filled">
                You are in Preview Mode. You can answer the questions, but the answers will not be recorded. You cannot submit the survey.
            </MudAlert>
        }

        @if (Survey != null && Survey.Id > 0 && !Loading)
        {
            <MudText Typo="Typo.h4" Class="survey-title">@Survey.Title</MudText>
            <MudText Typo="Typo.subtitle1" Class="survey-description">@Survey.Description</MudText>

            @foreach (var question in Survey.Questions.OrderBy(x => x.QuestionNumber))
            {
                int questionNumber = Survey.Questions.OrderBy(x => x.QuestionNumber).ToList().FindIndex(x => x.Id == question.Id) + 1;
                <div class="question-container">
                    <MudText>
                        <span class="question-number">@questionNumber.</span>
                        <span class="question-text">@question.Text</span>
                    </MudText>

                    @if (question.Answers.Count > 0)
                    {
                        <div class="options-container">
                            @if (question.QuestionType == QuestionType.MultipleChoice)
                            {
                                MultipleChoiceAnswerViewModel answer = question.Answers.FirstOrDefault() as MultipleChoiceAnswerViewModel;

                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudRadioGroup @key="question" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))">
                                        <MudStack Spacing="2">
                                            @foreach (var option in ((MultipleChoiceQuestionViewModel)question).Options.OrderBy(o => o.Order))
                                            {
                                                <MudRadio Color="Color.Primary" Label="@option.OptionText" Value="@option.Id" />
                                            }
                                        </MudStack>
                                    </MudRadioGroup>
                                </MudPaper>
                            }
                            else if (question.QuestionType == QuestionType.Rating1To10)
                            {
                                Rating1To10AnswerViewModel answer = question.Answers.FirstOrDefault() as Rating1To10AnswerViewModel;

                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudRadioGroup @key="question" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))">
                                        <div class="rating-options">
                                            @for (int i = 1; i <= 10; i++)
                                            {
                                                int ratingValue = i;
                                                <MudPaper Class="rating-option" Elevation="0">
                                                    <MudRadio Color="Color.Primary" Label="@i.ToString()" Value="@ratingValue" LabelPlacement="Placement.Top" />
                                                </MudPaper>
                                            }
                                        </div>
                                    </MudRadioGroup>
                                </MudPaper>
                            }
                            else if (question.QuestionType == QuestionType.Text)
                            {
                                TextAnswerViewModel answer = question.Answers.FirstOrDefault() as TextAnswerViewModel;

                                <MudTextField @key="question"
                                              T="string"
                                              Value="answer.Text"
                                              ValueChanged="@((t) => HandleAnswerQuestion(answer, t))"
                                              Label="Your response"
                                              Variant="Variant.Outlined"
                                              FullWidth="true"
                                              Lines="3" />
                            }
                            else if (question.QuestionType == QuestionType.TrueFalse)
                            {
                                TrueFalseAnswerViewModel answer = question.Answers.FirstOrDefault() as TrueFalseAnswerViewModel;

                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudRadioGroup @key="question" T="bool?" Value="answer.Value" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))">
                                        <MudStack Row="true" Spacing="4">
                                            <MudRadio Color="Color.Primary" T="bool?" Label="True" Value="@((bool?)true)" />
                                            <MudRadio Color="Color.Primary" T="bool?" Label="False" Value="@((bool?)false)" />
                                        </MudStack>
                                    </MudRadioGroup>
                                </MudPaper>
                            }
                            else if (question.QuestionType == QuestionType.SelectAllThatApply)
                            {
                                var saQuestion = question as SelectAllThatApplyQuestionViewModel;
                                SelectAllThatApplyAnswerViewModel saAnswer = saQuestion.Answers.FirstOrDefault() as SelectAllThatApplyAnswerViewModel;

                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudStack Spacing="2">
                                        @for (int i = 0; i < saQuestion.Options.Count; i++)
                                        {
                                            var option = saQuestion.Options[i];
                                            var index = i; // Capture the index for the closure

                                            // Ensure the SelectedOptions list has enough elements
                                            while (saAnswer.SelectedOptions.Count <= index)
                                            {
                                                saAnswer.SelectedOptions.Add(false);
                                            }

                                            <MudCheckBox @key="option"
                                                         T="bool"
                                                         Color="Color.Primary"
                                                         Label="@option.OptionText"
                                                         Checked="@saAnswer.SelectedOptions[index]"
                                                         CheckedChanged="@((bool v) => HandleSelectAllThatApplyOption(saAnswer, index, v, option.Id))" />
                                        }
                                    </MudStack>
                                </MudPaper>
                            }
                        </div>
                    }
                </div>
            }

            <div class="text-center">
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Size="MudBlazor.Size.Large"
                           OnClick="@(() => SubmitSurvey())"
                           Disabled="@Preview"
                           title="@(Preview ? "Survey cannot be submitted in Preview mode" : "Submit")"
                           Class="survey-submit-btn">
                    Submit Survey
                </MudButton>
            </div>
        }
        else if (Loading)
        {
            <div class="d-flex justify-center my-8">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            <div class="d-flex justify-center my-8">
                <MudAlert Severity="Severity.Warning">Survey not found or could not be loaded.</MudAlert>
            </div>
        }
    }
</div>