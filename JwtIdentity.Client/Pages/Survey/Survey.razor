@page "/survey/{SurveyId:guid}"
@namespace JwtIdentity.Client.Pages.Survey
@inherits SurveyModel

<PageTitle>Survey Shark - Survey</PageTitle>

<div class="survey-container">
    @if (!isCaptchaVerified && !Preview && !ViewAnswers)
    {
        <MudText Typo="Typo.h5" Class="mb-4" Align="Align.Center">Verification Required</MudText>
        <!-- reCAPTCHA widget with data-callback pointing to our JS function -->
        <div id="captcha-container">
            <div class="g-recaptcha" data-sitekey=@Configuration["ReCaptcha:SiteKey"] data-callback="onCaptchaSuccess"></div>
        </div>
        <MudText Typo="Typo.body2" Class="mt-4" Align="Align.Center">Please complete the CAPTCHA to proceed.</MudText>
    }
    else
    {
        @if (Preview)
        {
            <MudAlert Class="survey-alert" Severity="Severity.Info" Variant="Variant.Filled">
                You are in Preview Mode. You can answer the questions, but the answers will not be recorded. You cannot submit the survey.
            </MudAlert>
        }

        @if (Survey != null && Survey.Id > 0 && !Loading)
        {
            <MudText Typo="Typo.h4" Class="survey-title">@Survey.Title</MudText>
            <MudText Typo="Typo.subtitle1" Class="survey-description">@Survey.Description</MudText>

            if (IsAnonymousUser)
            {
                <div class="question-container">
                    <MudText>
                        <span class="question-number">0.</span>
                        <span class="question-text">
                            Since you are not logged in, you must agree to our <MudLink Href="/privacy-policy" Underline="Underline.None" Typo="Typo.inherit" Target="Target._blank">Privacy Policy<MudIcon Icon="@Icons.Material.Filled.OpenInNew" /></MudLink>
                            <span> and </span>
                            <MudLink Href="/terms-of-service" Underline="Underline.None" Typo="Typo.inherit" Target="Target._blank">Terms of Service<MudIcon Icon="@Icons.Material.Filled.OpenInNew" /></MudLink>
                            before you can take this survey.
                        </span>
                    </MudText>
                    <div class="options-container">
                        <MudPaper Elevation="0" Class="pa-2">
                            <MudRadioGroup T="bool" @bind-Value="AgreedToTerms" Disabled="AgreedToTerms">
                                <MudStack Spacing="2">

                                    <MudRadio Color="Color.Primary" Label="I Agree" Value="true" />
                                    <MudRadio Color="Color.Primary" Label="I Disagree" Value="false" />

                                </MudStack>
                            </MudRadioGroup>
                        </MudPaper>
                    </div>
                </div>
            }

            @if (HasBranching && !ViewAnswers)
            {
                <!-- Branching Mode: One question at a time -->
                @if (CurrentQuestion != null)
                {
                    <div class="mb-3">
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Question @(CurrentQuestionIndex + 1) of @QuestionsToShow.Count
                        </MudText>
                        <MudProgressLinear Color="Color.Primary" Value="@((double)(CurrentQuestionIndex + 1) / QuestionsToShow.Count * 100)" Class="my-2" />
                    </div>

                    <div class="question-container">
                        <MudText>
                            @if (CurrentQuestion.IsRequired == true)
                            {
                                <MudText Color="Color.Error" Typo="Typo.caption" Class="RequiredStar">*</MudText>
                            }
                            <span class="question-number">@(CurrentQuestionIndex + 1).</span>
                            <span class="question-text">@CurrentQuestion.Text</span>
                        </MudText>

                        @if (CurrentQuestion.Answers.Count > 0)
                        {
                            <div class="options-container">
                                @if (CurrentQuestion.QuestionType == QuestionType.MultipleChoice)
                                {
                                    var answer = CurrentQuestion.Answers.FirstOrDefault() as MultipleChoiceAnswerViewModel;
                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudRadioGroup @key="CurrentQuestion" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))">
                                            <MudStack Spacing="2">
                                                @foreach (var option in ((MultipleChoiceQuestionViewModel)CurrentQuestion).Options.OrderBy(o => o.Order))
                                                {
                                                    <MudRadio Color="Color.Primary" Label="@option.OptionText" Value="@option.Id" />
                                                }
                                            </MudStack>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (CurrentQuestion.QuestionType == QuestionType.Rating1To10)
                                {
                                    var answer = CurrentQuestion.Answers.FirstOrDefault() as Rating1To10AnswerViewModel;
                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudRadioGroup @key="CurrentQuestion" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))">
                                            <div class="rating-options">
                                                <MudPaper Class="rating-option" Elevation="0">
                                                    @for (int i = 1; i <= 10; i++)
                                                    {
                                                        <MudRadio Color="Color.Primary" Label="@i.ToString()" Value="@i" LabelPlacement="Placement.Left" />
                                                    }
                                                </MudPaper>
                                            </div>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (CurrentQuestion.QuestionType == QuestionType.Text)
                                {
                                    var answer = CurrentQuestion.Answers.FirstOrDefault() as TextAnswerViewModel;
                                    <MudTextField @key="CurrentQuestion" T="string" Value="answer.Text" ValueChanged="@((t) => HandleAnswerQuestion(answer, t))"
                                                  Label="Your answer" Variant="Variant.Outlined" Lines="3" Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))" />
                                }
                                else if (CurrentQuestion.QuestionType == QuestionType.TrueFalse)
                                {
                                    var answer = CurrentQuestion.Answers.FirstOrDefault() as TrueFalseAnswerViewModel;
                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudRadioGroup @key="CurrentQuestion" T="bool?" Value="@answer.Value" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))">
                                            <MudStack Spacing="2">
                                                <MudRadio T="bool?" Color="Color.Primary" Label="True" Value="@((bool?)true)" />
                                                <MudRadio T="bool?" Color="Color.Primary" Label="False" Value="@((bool?)false)" />
                                            </MudStack>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (CurrentQuestion.QuestionType == QuestionType.SelectAllThatApply)
                                {
                                    var answer = CurrentQuestion.Answers.FirstOrDefault() as SelectAllThatApplyAnswerViewModel;
                                    var saQuestion = CurrentQuestion as SelectAllThatApplyQuestionViewModel;
                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudStack Spacing="2">
                                            @for (int i = 0; i < saQuestion.Options.Count; i++)
                                            {
                                                var index = i;
                                                var option = saQuestion.Options[index];
                                                <MudCheckBox @key="option" T="bool" Value="@answer.SelectedOptions[index]"
                                                            ValueChanged="@((bool isChecked) => HandleSelectAllThatApplyOption(answer, index, isChecked, option.Id))"
                                                            Label="@option.OptionText" Color="Color.Primary" Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))" />
                                            }
                                        </MudStack>
                                    </MudPaper>
                                }
                            </div>
                        }
                    </div>

                    <!-- Navigation Buttons -->
                    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="mt-4">
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="GoToPreviousQuestion" Disabled="@IsFirstQuestion">
                            <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-1" /> Previous
                        </MudButton>

                        @if (IsLastQuestion)
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => SubmitSurvey())"
                                       Disabled="@(Preview || !IsCurrentQuestionAnswered() || (IsAnonymousUser && !AgreedToTerms))">
                                Submit Survey
                            </MudButton>
                        }
                        else
                        {
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="GoToNextQuestion" Disabled="@(!IsCurrentQuestionAnswered())">
                                Next <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="ml-1" />
                            </MudButton>
                        }
                    </MudStack>
                }
            }
            else
            {
                <!-- Non-Branching Mode: All questions on one page -->
                @foreach (var question in Survey.Questions.OrderBy(x => x.QuestionNumber))
                {
                    int questionNumber = Survey.Questions.OrderBy(x => x.QuestionNumber).ToList().FindIndex(x => x.Id == question.Id) + 1;                
                    <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(Preview && questionNumber == 1 ? new List<int>() { 0 } : new List<int>())">
                        <div class="question-container">
                        <MudText>
                            @if (question.IsRequired == true)
                            {
                                <MudText Color="Color.Error" Typo="Typo.caption" Class="RequiredStar">*</MudText>
                            }
                            <span id="@questionNumber" class="question-number">@questionNumber.</span>
                            <span class="question-text">@question.Text</span>
                        </MudText>

                        @if (question.Answers.Count > 0)
                        {
                            <div class="options-container">
                                @if (question.QuestionType == QuestionType.MultipleChoice)
                                {
                                    MultipleChoiceAnswerViewModel answer = question.Answers.FirstOrDefault() as MultipleChoiceAnswerViewModel;

                                    <MudPaper Elevation="0" Class="pa-2">
                                            <MudRadioGroup @key="question" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(ViewAnswers || (IsAnonymousUser && !AgreedToTerms))">
                                            <MudStack Spacing="2">
                                                @foreach (var option in ((MultipleChoiceQuestionViewModel)question).Options.OrderBy(o => o.Order))
                                                {
                                                    <MudRadio Color="Color.Primary" Label="@option.OptionText" Value="@option.Id" />
                                                }
                                            </MudStack>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (question.QuestionType == QuestionType.Rating1To10)
                                {
                                    Rating1To10AnswerViewModel answer = question.Answers.FirstOrDefault() as Rating1To10AnswerViewModel;

                                    <MudPaper Elevation="0" Class="pa-2">
                                            <MudRadioGroup @key="question" T="int" Value="answer.SelectedOptionId" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(ViewAnswers || (IsAnonymousUser && !AgreedToTerms))">
                                            <div class="rating-options">
                                                <MudPaper Class="rating-option" Elevation="0">
                                                    <MudRadio Color="Color.Primary" Label="1" Value="1" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="2" Value="2" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="3" Value="3" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="4" Value="4" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="5" Value="5" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="6" Value="6" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="7" Value="7" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="8" Value="8" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="9" Value="9" LabelPlacement="Placement.Left" />
                                                    <MudRadio Color="Color.Primary" Label="10" Value="10" LabelPlacement="Placement.Left" />
                                                </MudPaper>
                                            </div>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (question.QuestionType == QuestionType.Text)
                                {
                                    TextAnswerViewModel answer = question.Answers.FirstOrDefault() as TextAnswerViewModel;

                                    <MudTextField @key="question"
                                                  T="string"
                                                  Value="answer.Text"
                                                  ValueChanged="@((t) => HandleAnswerQuestion(answer, t))"
                                                  Label="Your response"
                                                  Variant="Variant.Outlined"
                                                  FullWidth="true"
                                                  Lines="3"
                                                  Disabled="@(ViewAnswers || (IsAnonymousUser && !AgreedToTerms))" />
                                }
                                else if (question.QuestionType == QuestionType.TrueFalse)
                                {
                                    TrueFalseAnswerViewModel answer = question.Answers.FirstOrDefault() as TrueFalseAnswerViewModel;

                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudRadioGroup @key="question" T="bool?" Value="answer.Value" ValueChanged="@((v) => HandleAnswerQuestion(answer, v))" Disabled="@(ViewAnswers || (IsAnonymousUser && !AgreedToTerms))">
                                            <MudStack Row="true" Spacing="4">
                                                <MudRadio Color="Color.Primary" T="bool?" Label="True" Value="@((bool?)true)" />
                                                <MudRadio Color="Color.Primary" T="bool?" Label="False" Value="@((bool?)false)" />
                                            </MudStack>
                                        </MudRadioGroup>
                                    </MudPaper>
                                }
                                else if (question.QuestionType == QuestionType.SelectAllThatApply)
                                {
                                    var saQuestion = question as SelectAllThatApplyQuestionViewModel;
                                    SelectAllThatApplyAnswerViewModel saAnswer = saQuestion.Answers.FirstOrDefault() as SelectAllThatApplyAnswerViewModel;

                                    <MudPaper Elevation="0" Class="pa-2">
                                        <MudStack Spacing="2">
                                            @for (int i = 0; i < saQuestion.Options.Count; i++)
                                            {
                                                var option = saQuestion.Options[i];
                                                var index = i; // Capture the index for the closure

                                                // Ensure the SelectedOptions list has enough elements
                                                while (saAnswer.SelectedOptions.Count <= index)
                                                {
                                                    saAnswer.SelectedOptions.Add(false);
                                                }

                                                <MudCheckBox @key="option"
                                                             T="bool"
                                                             Color="Color.Primary"
                                                             Label="@option.OptionText"
                                                             Value="@saAnswer.SelectedOptions[index]"
                                                             ValueChanged="@((bool v) => HandleSelectAllThatApplyOption(saAnswer, index, v, option.Id))"
                                                             Disabled="@(ViewAnswers || (IsAnonymousUser && !AgreedToTerms))" />
                                            }
                                        </MudStack>
                                    </MudPaper>
                                }
                                
                            </div>
                        }                        
                    </div>
                    @if (questionNumber == 2)
                    {
                        string Step0Text = Preview ? @"This is what the survey will look like. 
Feel free to click around. Responses aren't saved in preview mode." : "Go ahead and answer all questions and then submit the survey to continue the demo.";
                        <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0 })" AnchorOrigin="Origin.TopLeft" TransformOrigin="Origin.TopLeft">
                            <MudText Typo="Typo.body2" Style="white-space:pre-line">@Step0Text</MudText>
                            <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0 })" IsButton="true">
                                <MudButton id="DemoNext_button" OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success" aria-role="button">Next</MudButton>
                            </DemoBorder>
                        </DemoPopup>
                    }
                </DemoBorder>                
                }

                @if (!ViewAnswers && !HasBranching)
                {
                    <div class="text-center">
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 1 })" IsButton="true">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       Size="MudBlazor.Size.Large"
                                       OnClick="@(() => SubmitSurvey())"
                                       Disabled="@(Preview || (IsAnonymousUser && !AgreedToTerms))"
                                       title="@(Preview ? "Survey cannot be submitted in Preview mode" : "Submit")"
                                       Class="survey-submit-btn" id="survey-submit-btn">
                                Submit Survey
                            </MudButton>
                        </DemoBorder>
                        @{
                            string demoText = DemoStep == 1 ? @"The submit survey button is disabled in preview mode. 
It becomes active once all required questions are answered in a real survey." : DemoStep == 2 ? "Click Next to continue the demo." : "";
                        }
                        <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(Preview ? new List<int>() { 1, 2 } : new List<int>() { })" TransformOrigin="Origin.TopLeft" AnchorOrigin="Origin.BottomLeft">
                            <MudText Typo="Typo.body2" Style="white-space: pre-line;">@demoText</MudText>
                            <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 1, 2 })" IsButton="true">
                                <MudButton OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                            </DemoBorder>
                        </DemoPopup>
                    </div>
                }
            }
        }
        else if (Loading)
        {
            <div class="d-flex justify-center my-8">
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            </div>
        }
        else
        {
            <div class="d-flex justify-center my-8">
                <MudAlert Severity="Severity.Warning">Survey not found or could not be loaded.</MudAlert>
            </div>
        }
    }
</div>