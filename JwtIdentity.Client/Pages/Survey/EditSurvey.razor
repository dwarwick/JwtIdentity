@page "/survey/edit/{SurveyId}"
@namespace JwtIdentity.Client.Pages.Survey
@inherits EditSurveyModel
@attribute [Authorize(Policy = Permissions.CreateSurvey)]

<PageTitle>Survey Shark - Edit Survey</PageTitle>

<MudStack Row="true" Justify="Justify.SpaceBetween">
    <MudText Typo="Typo.h4">Edit Survey</MudText>


    <DemoBorder Class="ms-auto mt-2" CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 9 })" IsButton="true">
        <MudButton Id="PublishSurveyBtn" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="PublishSurvey" Disabled="@(Survey.Published)">Publish Survey</MudButton>
    </DemoBorder>

    <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 9 })">        
        <MudText Typo="Typo.body2">Now click the Publish Survey button to publish the survey.</MudText>        
    </DemoPopup>
</MudStack>
<MudTextField Label="Survey Title" T="string" Value="Survey.Title" ValueChanged="@((e) => UpdateTitleDescription(e, "title"))" Class="my-2" Variant="Variant.Filled" />
<MudTextField Label="Survey Description" T="string" Value="Survey.Description" ValueChanged="@((e) => UpdateTitleDescription(e, "description"))" Class="mb-2" Variant="Variant.Filled" Lines="3" MaxLines="5" AutoGrow="true" Counter="500" MaxLength="500" />

@if (!string.IsNullOrWhiteSpace(Survey.AiInstructions) && !CanEditQuestions)
{
    <MudTextField Label="AI Prompt" T="string" Value="Survey.AiInstructions" ValueChanged="@UpdateAiInstructions" Class="mb-2" Variant="Variant.Filled" Lines="3" MaxLines="6" AutoGrow="true" Counter="500" MaxLength="500" />
}

@if (RequiresReview)
{
    <MudAlert Severity="Severity.Warning" Class="mb-2">
        <MudText Typo="Typo.body2">Please review the AI generated questions and answers. You may regenerate up to 2 times.</MudText>
        <MudStack Row="true" Spacing="1" Class="mt-2">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="RegenerateQuestions" Disabled="@(Survey.AiRetryCount >= 2)">Regenerate Questions</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AcceptQuestions">Accept Questions</MudButton>
        </MudStack>
    </MudAlert>
}

<div class="d-md-flex flex-column justify-space-evenly gap-2">
    <MudExpansionPanels MultiExpansion="true">
        @if (Survey?.Questions != null && Survey.Questions.Count > 0)
        {
            <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0 })">
                <MudExpansionPanel Id="QuestionsPanel" Expanded="@QuestionsPanelExpanded" ExpandedChanged="HandleQuestionsPanelExpanded">
                    <TitleContent>
                        <div class="mud-expand-panel-text">Survey Questions (Select a Question to Edit it)</div>
                        <MudText Typo="Typo.caption" Align="Align.Center" Class="text-emphasis">Drag and Drop Questions to Reorder them, or click the Delete Icon to Remove a Question</MudText>
                    </TitleContent>
                    <ChildContent>

                        <MudPaper Class="p-2 flex-1">
                            <MudList Id="QuestionList" T="QuestionViewModel" Dense="true" SelectedValue="SelectedQuestion" SelectionMode="MudBlazor.SelectionMode.ToggleSelection" SelectedValueChanged="QuestionSelected">
                                @foreach (var question in Survey.Questions)
                                {
                                    <DragAndDrop TItem="QuestionViewModel" Items="Survey.Questions" Item="question" ItemsChanged="@(CanEditQuestions ? DroppedQuestion : null)">
                                        <MudStack Class=".d-flex.flex-row.gap-3.ai-style-change-1" Row="true" AlignItems="AlignItems.Center">
                                            @if (CanEditQuestions)
                                            {
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" OnClick="@(() => DeleteQuestion(question))" />
                                                <MudIcon Class="drag-icon ai-style-change-9" Icon="@Icons.Material.Filled.DragIndicator" />
                                            }

                                            @if (question.QuestionNumber == 1)
                                            {
                                                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 2, 4, 6 })">
                                                    <MudListItem Class="ai-style-change-3 ai-style-change-6" Text="@($"{question.QuestionNumber}. {question.Text}")" Value="@question" />
                                                </DemoBorder>
                                            }
                                            else
                                            {
                                                <MudListItem Class="ai-style-change-3 ai-style-change-6" Text="@($"{question.QuestionNumber}. {question.Text}")" Value="@question" />
                                            }


                                            @if (question.IsRequired)
                                            {
                                                <MudText Color="Color.Error" Typo="Typo.caption" Class="RequiredStar">*</MudText>
                                            }

                                        </MudStack>
                                        <div style="height: 2px; background-color: blueviolet; width: 100%;"></div>
                                    </DragAndDrop>
                                }
                            </MudList>
                        </MudPaper>
                    </ChildContent>
                </MudExpansionPanel>
            </DemoBorder>
            <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 0 })">
                <MudText Typo="Typo.body2">Expand the Survey Questions Accordion by clicking it.</MudText>
            </DemoPopup>
            <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 1 })">
                <MudText Typo="Typo.body2">The questions can be reordered by dragging and dropping them.</MudText>
                <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 1 })" IsButton="true">
                    <MudButton OnClick="NextDemoStep" Variant="Variant.Filled" Color="Color.Success">Next</MudButton>
                </DemoBorder>
            </DemoPopup>
            <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 2 })">
                <MudText Typo="Typo.body2">Click question number 1 to select it. The question text will turn blue when it is selected.</MudText>
            </DemoPopup>
            <DemoPopup CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 4 })">
                <MudText Typo="Typo.body2">Click the selected question to deselect it.</MudText>
            </DemoPopup>
        }

        @if (!Survey.Published)
        {
            @if (CanEditQuestions)
            {
            <MudExpansionPanel @ref="ManualQuestionPanel" @bind-Expanded="@ManualQuestionPanelExpanded" Text="Create Question Manually">
                <MudPaper Class="p-2">
                    <MudStack Spacing="1">
                        @{ bool purpleBorder = ShowDemoStep(3); }
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 3, 5 })" IsButton="@purpleBorder">
                            <MudSelect Id="QuestionTypeSelect" Label="Select the Question Type"
                                       Value="@SelectedQuestionType"
                                       ValueChanged="@((string questionType) => HandleSelectedQuestionType(questionType))"
                                       Variant="Variant.Filled"
                                       Immediate="true"
                                       ErrorText="Please select a type"
                                       Error="@(string.IsNullOrWhiteSpace(SelectedQuestionType))"
                                       Disabled="@(SelectedQuestion != null)">
                                @foreach (var questionType in QuestionTypes)
                                {
                                    <MudSelectItem Value="@(StringHelper.PascalCaseToWords(questionType))" />
                                }
                            </MudSelect>
                        </DemoBorder>
                        <MudText Typo="Typo.h6" Class="mt-5">Create a @StringHelper.PascalCaseToWords(SelectedQuestionType) Question</MudText>
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 3, 6 })">
                            <MudTextField Id="Text" Label="Question Text" @bind-Value="QuestionText" Variant="Variant.Filled" Lines="1" MaxLines="5" AutoGrow="true" Immediate="true" Counter="500" MaxLength="500" />
                        </DemoBorder>
                    </MudStack>

                    <MudStack Row="true">
                        <DemoBorder CurrentDemoStep="@DemoStep" StepsToShow="@(new List<int>() { 8 })" IsButton="true">
                            <MudButton Id="SaveQuestionBtn" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddQuestionToSurvey" Disabled="@AddQuestionToSurveyDisabled">Save Question</MudButton>
                        </DemoBorder>
                        <MudCheckBox T="bool" @bind-Value="IsRequired" Label="Is Required?" Color="Color.Primary" Disabled="@AddQuestionToSurveyDisabled" />
                    </MudStack>
                </MudPaper>

                @if (SelectedQuestionType.Replace(" ", "") == Enum.GetName(QuestionType.MultipleChoice) ||
                            SelectedQuestionType.Replace(" ", "") == Enum.GetName(QuestionType.SelectAllThatApply))
                {
                    <MudPaper>
                        <MudText Typo="Typo.h6" Class="mb-1">Add the Question Choices</MudText>
                        <MudSelect Id="PresetChoices" Label="Preset Choices (Will overwrite existing choices)" T="string" @bind-Value="SelectedPresetChoice" Variant="Variant.Filled" Dense="true">
                            <MudSelectItem T="string" Value=null>-- Select Preset --</MudSelectItem>
                            @foreach (var preset in PresetChoices)
                            {
                                <MudSelectItem Value="@preset.Key">@preset.Key</MudSelectItem>
                            }
                        </MudSelect>

                        <MudTextField id="Choice" Label="Choice Text" @bind-Value="NewChoiceOptionText" Variant="Variant.Filled" Lines="1" MaxLines="5" AutoGrow="true" Immediate="true" Counter="50" MaxLength="50" />

                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" OnClick="@AddChoiceOption" Disabled="@(string.IsNullOrWhiteSpace(NewChoiceOptionText))">Add Choice</MudButton>

                        <div style="height:300px;overflow:auto;" class="mt-2">
                            <MudList T="string" ReadOnly="true" Dense="true">
                                @foreach (var choice in MultipleChoiceQuestion.Options)
                                {
                                    <DragAndDrop TItem="ChoiceOptionViewModel" Items="MultipleChoiceQuestion.Options" Item="choice" ItemsChanged="DroppedChoiceOption">
                                        <MudStack Class=".d-flex.flex-row.gap-3.ai-style-change-1" Row="true" AlignItems="AlignItems.Center">
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete" ButtonType="ButtonType.Button" OnClick="@(() => DeleteChoiceOption(choice))" />
                                            <MudIcon Class="drag-icon ai-style-change-9" Icon="@Icons.Material.Filled.DragIndicator" />
                                            <MudListItem Class="ai-style-change-3 ai-style-change-6" Text="@choice.OptionText" />
                                        </MudStack>
                                        <div style="height: 2px; background-color: blueviolet; width: 100%;"></div>
                                    </DragAndDrop>
                                }
                            </MudList>
                        </div>
                    </MudPaper>
                }
            </MudExpansionPanel>

            <MudExpansionPanel @ref="ExistingQuestionPanel" Text="Start with Existing Question" @bind-Expanded="@ExistingQuestionPanelExpanded">
                <SfAutoComplete TValue="BaseQuestionDto" TItem="BaseQuestionDto" PopupHeight="130px" EnableVirtualization="true" Placeholder="Start Typing to Search Existing Questions" Query="@RemoteDataQuery" Value="SelectedExistingQuestion" ValueChanged="HandleSelectedExistingQuestion" ShowPopupButton="true">
                    <SfDataManager Url="odata/odataquestion" CrossDomain="true" Adaptor="Adaptors.ODataV4Adaptor" />
                    <AutoCompleteFieldSettings Text="Text" Value="Text" />
                </SfAutoComplete>

            </MudExpansionPanel>
            }
            else if (SelectedQuestion != null)
            {
                <MudPaper Class="p-2 mt-2">
                    <MudText Typo="Typo.h6">@SelectedQuestion.Text</MudText>
                    @if (SelectedQuestion.QuestionType == QuestionType.MultipleChoice || SelectedQuestion.QuestionType == QuestionType.SelectAllThatApply)
                    {
                        <MudList T="string" Dense="true">
                            @foreach (var opt in MultipleChoiceQuestion.Options)
                            {
                                <MudListItem Text="@opt.OptionText" />
                            }
                        </MudList>
                    }
                    else if (SelectedQuestion.QuestionType == QuestionType.Text)
                    {
                        <MudText Typo="Typo.body2">A text box will be shown.</MudText>
                    }
                    else if (SelectedQuestion.QuestionType == QuestionType.Rating1To10)
                    {
                        <MudText Typo="Typo.body2">The survey taker will be shown a 1 to 10 rating scale where 10 is the maximum.</MudText>
                    }
                    else if (SelectedQuestion.QuestionType == QuestionType.TrueFalse)
                    {
                        <MudList T="string" Dense="true">
                            <MudListItem Text="True" />
                            <MudListItem Text="False" />
                        </MudList>
                    }
                </MudPaper>
            }
        }
        else
        {
            <MudAlert Severity="Severity.Normal" Variant="Variant.Outlined">This survey has been published</MudAlert>
        }

    </MudExpansionPanels>


</div>
